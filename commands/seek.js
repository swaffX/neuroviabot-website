const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { useMainPlayer } = require('discord-player');
const config = require('../config.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('seek')
        .setDescription('‚è© ≈ûarkƒ±da belirli bir zamana atla')
        .addStringOption(option =>
            option.setName('zaman')
                .setDescription('Atlanacak zaman (√∂rn: 1:30, 90, 2:15)')
                .setRequired(true)
        ),

    async execute(interaction) {
        const player = useMainPlayer();
        const queue = player.nodes.get(interaction.guild);
        const timeInput = interaction.options.getString('zaman');

        // Kullanƒ±cƒ±nƒ±n sesli kanalda olup olmadƒ±ƒüƒ±nƒ± kontrol et
        const voiceChannel = interaction.member?.voice?.channel;
        if (!voiceChannel) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Hata')
                .setDescription('Bu komutu kullanabilmek i√ßin bir sesli kanalda olmanƒ±z gerekiyor!')
                .setTimestamp();
            
            return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // Queue var mƒ± ve ≈üarkƒ± √ßalƒ±yor mu kontrol et
        if (!queue || !queue.currentTrack || !queue.isPlaying()) {
            const noMusicEmbed = new EmbedBuilder()
                .setColor('#ffa500')
                .setTitle('üéµ ≈ûu Anda √áalan ≈ûarkƒ± Yok')
                .setDescription('Atlamak i√ßin √∂nce bir ≈üarkƒ± √ßalmalƒ±sƒ±n!')
                .addFields({
                    name: 'üéµ ≈ûarkƒ± √áal',
                    value: '`/play [≈üarkƒ± adƒ±]` komutunu kullanarak ≈üarkƒ± √ßalmaya ba≈ülayabilirsin!',
                    inline: false
                })
                .setTimestamp();
            
            return interaction.reply({ embeds: [noMusicEmbed] });
        }

        // Bot ve kullanƒ±cƒ± aynƒ± kanalda mƒ±
        const botChannel = interaction.guild.members.me?.voice?.channel;
        if (botChannel && voiceChannel.id !== botChannel.id) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Hata')
                .setDescription('Benimle aynƒ± sesli kanalda olmanƒ±z gerekiyor!')
                .setTimestamp();
            
            return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        try {
            // Zaman formatƒ±nƒ± parse et
            const seekTime = parseTimeToMilliseconds(timeInput);
            
            if (seekTime === null) {
                const invalidTimeEmbed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('‚ùå Ge√ßersiz Zaman Formatƒ±')
                    .setDescription('L√ºtfen ge√ßerli bir zaman formatƒ± kullanƒ±n!')
                    .addFields({
                        name: '‚úÖ Ge√ßerli Formatlar',
                        value: '‚Ä¢ `90` - 90 saniye\n‚Ä¢ `1:30` - 1 dakika 30 saniye\n‚Ä¢ `2:15` - 2 dakika 15 saniye\n‚Ä¢ `1:23:45` - 1 saat 23 dakika 45 saniye',
                        inline: false
                    })
                    .setTimestamp();
                
                return interaction.reply({ embeds: [invalidTimeEmbed], ephemeral: true });
            }

            const currentTrack = queue.currentTrack;
            const progress = queue.node.getTimestamp();
            const totalDuration = progress?.total?.value || 0;

            // ≈ûarkƒ± s√ºresini kontrol et
            if (seekTime > totalDuration) {
                const exceedsEmbed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('‚ùå S√ºre A≈üƒ±ldƒ±')
                    .setDescription('Belirtilen zaman ≈üarkƒ±nƒ±n toplam s√ºresini a≈üƒ±yor!')
                    .addFields(
                        { name: '‚è±Ô∏è ƒ∞stenen Zaman', value: formatTime(seekTime), inline: true },
                        { name: '‚è±Ô∏è ≈ûarkƒ± S√ºresi', value: currentTrack.duration, inline: true },
                        { name: 'üìè Maksimum', value: formatTime(totalDuration), inline: true }
                    )
                    .setTimestamp();
                
                return interaction.reply({ embeds: [exceedsEmbed], ephemeral: true });
            }

            // Seek i≈ülemi
            await queue.node.seek(seekTime);

            const currentTime = formatTime(seekTime);
            const progressBar = createProgressBar(seekTime, totalDuration, 25);

            const seekEmbed = new EmbedBuilder()
                .setColor(config.embedColor)
                .setTitle('‚è© ≈ûarkƒ±da Atlandƒ±')
                .setDescription(`**${currentTrack.title}** ≈üarkƒ±sƒ±nda **${currentTime}** zamanƒ±na atlandƒ±!`)
                .setThumbnail(currentTrack.thumbnail)
                .addFields(
                    { name: 'üé§ Sanat√ßƒ±', value: currentTrack.author, inline: true },
                    { name: '‚è±Ô∏è ≈ûu Anki Zaman', value: currentTime, inline: true },
                    { name: '‚è±Ô∏è Toplam S√ºre', value: currentTrack.duration, inline: true },
                    { 
                        name: 'üìä ƒ∞lerleme', 
                        value: progressBar,
                        inline: false 
                    },
                    { name: 'üë§ Atlayan', value: interaction.user.username, inline: true },
                    { name: 'üéµ Durum', value: '√áalƒ±yor', inline: true },
                    { name: 'üîä Ses Seviyesi', value: `${queue.node.volume}%`, inline: true }
                )
                .setTimestamp();

            await interaction.reply({ embeds: [seekEmbed] });
            
        } catch (error) {
            console.error('Seek komutunda hata:', error);
            
            let errorMessage = '≈ûarkƒ±da atlama i≈ülemi sƒ±rasƒ±nda bir hata olu≈ütu!';
            
            if (error.message.includes('seek')) {
                errorMessage = 'Bu ≈üarkƒ±da atlama i≈ülemi desteklenmiyor! (Canlƒ± yayƒ±n veya stream olabilir)';
            } else if (error.message.includes('not seekable')) {
                errorMessage = 'Bu ≈üarkƒ± t√ºr√ºnde atlama i≈ülemi yapƒ±lamaz!';
            }
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Atlama Hatasƒ±')
                .setDescription(errorMessage)
                .addFields({
                    name: 'üí° ƒ∞pucu',
                    value: '‚Ä¢ Canlƒ± yayƒ±nlarda atlama i≈ülemi √ßalƒ±≈ümaz\n‚Ä¢ Bazƒ± ≈üarkƒ± t√ºrlerinde bu √∂zellik desteklenmez\n‚Ä¢ ≈ûarkƒ±yƒ± yeniden ba≈ülatmayƒ± deneyin',
                    inline: false
                })
                .setTimestamp();

            await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }
    },
};

// Zaman string'ini millisaniyeye √ßevir
function parseTimeToMilliseconds(timeStr) {
    try {
        // Sadece sayƒ± ise (saniye)
        if (/^\d+$/.test(timeStr)) {
            return parseInt(timeStr) * 1000;
        }
        
        // MM:SS veya HH:MM:SS formatƒ±
        const parts = timeStr.split(':').map(Number);
        
        if (parts.length === 2) {
            // MM:SS
            const [minutes, seconds] = parts;
            if (minutes >= 0 && seconds >= 0 && seconds < 60) {
                return (minutes * 60 + seconds) * 1000;
            }
        } else if (parts.length === 3) {
            // HH:MM:SS
            const [hours, minutes, seconds] = parts;
            if (hours >= 0 && minutes >= 0 && minutes < 60 && seconds >= 0 && seconds < 60) {
                return (hours * 3600 + minutes * 60 + seconds) * 1000;
            }
        }
        
        return null;
    } catch {
        return null;
    }
}

// Millisaniyeyi zaman formatƒ±na √ßevir
function formatTime(ms) {
    const totalSeconds = Math.floor(ms / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    } else {
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
}

// Progress bar olu≈ütur
function createProgressBar(current, total, length = 20) {
    if (!total || total === 0) return '‚ñ±'.repeat(length);
    
    const percentage = current / total;
    const filledLength = Math.round(length * percentage);
    const emptyLength = length - filledLength;
    
    return '‚ñ∞'.repeat(filledLength) + '‚ñ±'.repeat(emptyLength);
}



