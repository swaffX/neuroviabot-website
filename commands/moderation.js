const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const { Guild, ModerationCase, Warning, GuildMember } = require('../models');
const { logger } = require('../utils/logger');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('mod')
        .setDescription('üõ°Ô∏è Moderasyon komutlarƒ±')
        .addSubcommand(subcommand =>
            subcommand
                .setName('warn')
                .setDescription('‚ö†Ô∏è Kullanƒ±cƒ±yƒ± uyar')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Uyarƒ±lacak kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Uyarƒ± sebebi')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('≈üiddet')
                        .setDescription('Uyarƒ± ≈üiddeti')
                        .addChoices(
                            { name: 'üü¢ Hafif', value: 'minor' },
                            { name: 'üü° Orta', value: 'moderate' },
                            { name: 'üü† Aƒüƒ±r', value: 'severe' },
                            { name: 'üî¥ Kritik', value: 'critical' }
                        )
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('kick')
                .setDescription('üë¢ Kullanƒ±cƒ±yƒ± sunucudan at')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Atƒ±lacak kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Atma sebebi')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('ban')
                .setDescription('üî® Kullanƒ±cƒ±yƒ± sunucudan yasakla')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Yasaklanacak kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Yasaklama sebebi')
                        .setRequired(false)
                )
                .addIntegerOption(option =>
                    option.setName('mesaj-sil')
                        .setDescription('Silinecek mesaj g√ºn√º (0-7)')
                        .setMinValue(0)
                        .setMaxValue(7)
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('unban')
                .setDescription('üîì Kullanƒ±cƒ±nƒ±n yasaƒüƒ±nƒ± kaldƒ±r')
                .addStringOption(option =>
                    option.setName('kullanƒ±cƒ±-id')
                        .setDescription('Yasaƒüƒ± kaldƒ±rƒ±lacak kullanƒ±cƒ±nƒ±n ID\'si')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Yasak kaldƒ±rma sebebi')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('mute')
                .setDescription('üîá Kullanƒ±cƒ±yƒ± sustur')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Susturulacak kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('s√ºre')
                        .setDescription('Susturma s√ºresi (√∂rn: 10m, 1h, 1d)')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Susturma sebebi')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('unmute')
                .setDescription('üîä Kullanƒ±cƒ±nƒ±n susturmasƒ±nƒ± kaldƒ±r')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Susturmasƒ± kaldƒ±rƒ±lacak kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Susturma kaldƒ±rma sebebi')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('timeout')
                .setDescription('‚è∞ Kullanƒ±cƒ±ya zaman a≈üƒ±mƒ± ver')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Zaman a≈üƒ±mƒ± verilecek kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('s√ºre')
                        .setDescription('Timeout s√ºresi (√∂rn: 10m, 1h)')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Timeout sebebi')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('untimeout')
                .setDescription('‚è∞ Kullanƒ±cƒ±nƒ±n timeout\'unu kaldƒ±r')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Timeout\'u kaldƒ±rƒ±lacak kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Timeout kaldƒ±rma sebebi')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('warnings')
                .setDescription('üìã Kullanƒ±cƒ±nƒ±n uyarƒ±larƒ±nƒ± g√∂r√ºnt√ºle')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Uyarƒ±larƒ± g√∂r√ºnt√ºlenecek kullanƒ±cƒ±')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('clear-warnings')
                .setDescription('üóëÔ∏è Kullanƒ±cƒ±nƒ±n uyarƒ±larƒ±nƒ± temizle')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Uyarƒ±larƒ± temizlenecek kullanƒ±cƒ±')
                        .setRequired(true)
                )
                .addStringOption(option =>
                    option.setName('sebep')
                        .setDescription('Temizleme sebebi')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('case')
                .setDescription('üìÑ Moderasyon vakasƒ±nƒ± g√∂r√ºnt√ºle')
                .addIntegerOption(option =>
                    option.setName('numara')
                        .setDescription('Vaka numarasƒ±')
                        .setMinValue(1)
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('history')
                .setDescription('üìä Kullanƒ±cƒ±nƒ±n moderasyon ge√ßmi≈üi')
                .addUserOption(option =>
                    option.setName('kullanƒ±cƒ±')
                        .setDescription('Ge√ßmi≈üi g√∂r√ºnt√ºlenecek kullanƒ±cƒ±')
                        .setRequired(true)
                )
        ),

    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();

        // Yetki kontrol√º
        const requiredPermissions = {
            warn: PermissionFlagsBits.ModerateMembers,
            kick: PermissionFlagsBits.KickMembers,
            ban: PermissionFlagsBits.BanMembers,
            unban: PermissionFlagsBits.BanMembers,
            mute: PermissionFlagsBits.ModerateMembers,
            unmute: PermissionFlagsBits.ModerateMembers,
            timeout: PermissionFlagsBits.ModerateMembers,
            untimeout: PermissionFlagsBits.ModerateMembers,
            warnings: PermissionFlagsBits.ModerateMembers,
            'clear-warnings': PermissionFlagsBits.ModerateMembers,
            case: PermissionFlagsBits.ModerateMembers,
            history: PermissionFlagsBits.ModerateMembers
        };

        const requiredPermission = requiredPermissions[subcommand];
        if (requiredPermission && !interaction.member.permissions.has(requiredPermission)) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Yetkisiz Eri≈üim')
                .setDescription('Bu komutu kullanabilmek i√ßin gerekli yetkiniz yok!')
                .setTimestamp();
            
            return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        try {
            switch (subcommand) {
                case 'warn':
                    await this.handleWarn(interaction);
                    break;
                case 'kick':
                    await this.handleKick(interaction);
                    break;
                case 'ban':
                    await this.handleBan(interaction);
                    break;
                case 'unban':
                    await this.handleUnban(interaction);
                    break;
                case 'mute':
                    await this.handleMute(interaction);
                    break;
                case 'unmute':
                    await this.handleUnmute(interaction);
                    break;
                case 'timeout':
                    await this.handleTimeout(interaction);
                    break;
                case 'untimeout':
                    await this.handleUntimeout(interaction);
                    break;
                case 'warnings':
                    await this.handleWarnings(interaction);
                    break;
                case 'clear-warnings':
                    await this.handleClearWarnings(interaction);
                    break;
                case 'case':
                    await this.handleCase(interaction);
                    break;
                case 'history':
                    await this.handleHistory(interaction);
                    break;
            }
        } catch (error) {
            logger.error('Moderation komutunda hata', error, { subcommand, user: interaction.user.id });
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Moderasyon Hatasƒ±')
                .setDescription('Moderasyon i≈ülemi sƒ±rasƒ±nda bir hata olu≈ütu!')
                .setTimestamp();

            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    },

    async handleWarn(interaction) {
        const targetUser = interaction.options.getUser('kullanƒ±cƒ±');
        const reason = interaction.options.getString('sebep');
        const severity = interaction.options.getString('≈üiddet') || 'moderate';

        // Kendine uyarƒ± kontrol√º
        if (targetUser.id === interaction.user.id) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Ge√ßersiz ƒ∞≈ülem')
                .setDescription('Kendinizi uyaramazsƒ±nƒ±z!')
                .setTimestamp();
            
            return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // Bot kontrol√º
        if (targetUser.bot) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Bot Kullanƒ±cƒ±sƒ±')
                .setDescription('Bot kullanƒ±cƒ±larƒ±nƒ± uyaramazsƒ±nƒ±z!')
                .setTimestamp();
            
            return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // Guild member kontrol√º
        const targetMember = await interaction.guild.members.fetch(targetUser.id).catch(() => null);
        if (!targetMember) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Kullanƒ±cƒ± Bulunamadƒ±')
                .setDescription('Bu kullanƒ±cƒ± sunucuda bulunamadƒ±!')
                .setTimestamp();
            
            return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        // Yetki kontrol√º (uyarƒ±lan ki≈üi moderat√∂rden √ºst r√ºtbede olmamalƒ±)
        if (targetMember.roles.highest.position >= interaction.member.roles.highest.position) {
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Yetkisiz ƒ∞≈ülem')
                .setDescription('Bu kullanƒ±cƒ±yƒ± uyaramazsƒ±nƒ±z! (Y√ºksek yetki)')
                .setTimestamp();
            
            return interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        await interaction.deferReply();

        try {
            // Case numarasƒ± al
            const guild = await Guild.findOne({ where: { id: interaction.guild.id } });
            const lastCase = await ModerationCase.findOne({
                where: { guildId: interaction.guild.id },
                order: [['caseNumber', 'DESC']]
            });
            const caseNumber = (lastCase?.caseNumber || 0) + 1;

            // Warning olu≈ütur
            const warning = await Warning.create({
                guildId: interaction.guild.id,
                userId: targetUser.id,
                moderatorId: interaction.user.id,
                reason: reason,
                severity: severity,
                caseNumber: caseNumber,
                channelId: interaction.channel.id,
                messageId: interaction.id
            });

            // Moderation case olu≈ütur
            const moderationCase = await ModerationCase.create({
                caseNumber: caseNumber,
                guildId: interaction.guild.id,
                userId: targetUser.id,
                moderatorId: interaction.user.id,
                type: 'warn',
                reason: reason,
                details: `≈ûiddet: ${severity}`,
                channelId: interaction.channel.id,
                messageId: interaction.id
            });

            // Kullanƒ±cƒ±nƒ±n toplam uyarƒ± sayƒ±sƒ±nƒ± g√ºncelle
            const guildMember = await GuildMember.findOne({
                where: { userId: targetUser.id, guildId: interaction.guild.id }
            });

            if (guildMember) {
                await guildMember.update({
                    warnings: (guildMember.warnings || 0) + 1
                });
            }

            // Severity emoji ve renk
            const severityInfo = {
                minor: { emoji: 'üü¢', color: '#00ff00', name: 'Hafif' },
                moderate: { emoji: 'üü°', color: '#ffff00', name: 'Orta' },
                severe: { emoji: 'üü†', color: '#ff8000', name: 'Aƒüƒ±r' },
                critical: { emoji: 'üî¥', color: '#ff0000', name: 'Kritik' }
            };

            const severityData = severityInfo[severity];

            const warnEmbed = new EmbedBuilder()
                .setColor(severityData.color)
                .setTitle(`‚ö†Ô∏è Kullanƒ±cƒ± Uyarƒ±ldƒ±`)
                .setDescription(`${targetUser} kullanƒ±cƒ±sƒ± uyarƒ±ldƒ±!`)
                .addFields(
                    { name: 'üë§ Uyarƒ±lan', value: `${targetUser} (${targetUser.tag})`, inline: true },
                    { name: 'üëÆ Moderat√∂r', value: interaction.user.username, inline: true },
                    { name: 'üìã Case #', value: caseNumber.toString(), inline: true },
                    { name: 'üìù Sebep', value: reason, inline: false },
                    { name: `${severityData.emoji} ≈ûiddet`, value: severityData.name, inline: true },
                    { name: '‚ö†Ô∏è Toplam Uyarƒ±', value: (guildMember?.warnings || 1).toString(), inline: true },
                    { name: 'üìÖ Tarih', value: new Date().toLocaleString('tr-TR'), inline: true }
                )
                .setTimestamp();

            await interaction.editReply({ embeds: [warnEmbed] });

            // DM g√∂nder
            try {
                const dmEmbed = new EmbedBuilder()
                    .setColor(severityData.color)
                    .setTitle(`‚ö†Ô∏è ${interaction.guild.name} - Uyarƒ± Aldƒ±nƒ±z`)
                    .setDescription(`Sunucumuzda bir uyarƒ± aldƒ±nƒ±z.`)
                    .addFields(
                        { name: 'üìù Sebep', value: reason, inline: false },
                        { name: `${severityData.emoji} ≈ûiddet`, value: severityData.name, inline: true },
                        { name: 'üëÆ Moderat√∂r', value: interaction.user.username, inline: true },
                        { name: 'üìã Case #', value: caseNumber.toString(), inline: true }
                    )
                    .setFooter({
                        text: 'Kurallara uymanƒ±zƒ± rica ederiz.',
                        iconURL: interaction.guild.iconURL()
                    })
                    .setTimestamp();

                await targetUser.send({ embeds: [dmEmbed] });
                await moderationCase.update({ dmSent: true });
            } catch (error) {
                await moderationCase.update({ 
                    dmSent: false, 
                    dmError: 'DM g√∂nderilemedi' 
                });
            }

            // Log kanalƒ±na g√∂nder
            if (guild?.modLogChannelId) {
                const logChannel = await interaction.guild.channels.fetch(guild.modLogChannelId).catch(() => null);
                if (logChannel) {
                    const logEmbed = new EmbedBuilder()
                        .setColor(severityData.color)
                        .setTitle('‚ö†Ô∏è Moderasyon: Uyarƒ±')
                        .addFields(
                            { name: 'üë§ Kullanƒ±cƒ±', value: `${targetUser} (${targetUser.tag})`, inline: true },
                            { name: 'üëÆ Moderat√∂r', value: `${interaction.user} (${interaction.user.tag})`, inline: true },
                            { name: 'üìã Case #', value: caseNumber.toString(), inline: true },
                            { name: 'üìù Sebep', value: reason, inline: false },
                            { name: `${severityData.emoji} ≈ûiddet`, value: severityData.name, inline: true },
                            { name: 'üìç Kanal', value: `${interaction.channel}`, inline: true },
                            { name: 'üÜî User ID', value: targetUser.id, inline: true }
                        )
                        .setTimestamp();

                    await logChannel.send({ embeds: [logEmbed] });
                }
            }

            // Otomatik i≈ülem kontrol√º (max warnings)
            if (guild?.maxWarnings && guildMember && guildMember.warnings >= guild.maxWarnings) {
                const autoAction = guild.warnAction || 'kick';
                
                try {
                    if (autoAction === 'kick') {
                        await targetMember.kick(`Maksimum uyarƒ± sayƒ±sƒ±na ula≈ütƒ± (${guild.maxWarnings})`);
                    } else if (autoAction === 'ban') {
                        await targetMember.ban({ reason: `Maksimum uyarƒ± sayƒ±sƒ±na ula≈ütƒ± (${guild.maxWarnings})` });
                    }

                    const autoEmbed = new EmbedBuilder()
                        .setColor('#ff0000')
                        .setTitle('üîÑ Otomatik ƒ∞≈ülem')
                        .setDescription(`${targetUser} kullanƒ±cƒ±sƒ± maksimum uyarƒ± sayƒ±sƒ±na ula≈ütƒ±ƒüƒ± i√ßin otomatik olarak ${autoAction === 'kick' ? 'atƒ±ldƒ±' : 'yasaklandƒ±'}!`)
                        .setTimestamp();

                    await interaction.followUp({ embeds: [autoEmbed] });
                } catch (error) {
                    logger.error('Otomatik moderasyon i≈ülemi hatasƒ±', error);
                }
            }

        } catch (error) {
            logger.error('Warning olu≈üturma hatasƒ±', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Uyarƒ± Hatasƒ±')
                .setDescription('Uyarƒ± olu≈üturulurken bir hata olu≈ütu!')
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    },

    // Diƒüer metodlar buraya gelecek...
};



